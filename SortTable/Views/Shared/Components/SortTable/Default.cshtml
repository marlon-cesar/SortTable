@model SortTableModel

<div class="table-responsive">
    <table class="table table-striped table-hover align-middle">
        <thead>
            <tr>
                @foreach (var item in Model.Properties)
                {
                    <th scope="col" class="@(item.PropertyType == typeof(bool) ? "text-center" : "")">
                        <a onclick="Search('@item.Name')">
                            @item.DisplayName
                        </a>
                        <i id="dateAscendingIcon" class="fa-solid fa-caret-up ms-1 @(Model.SortAscending && Model.SortProperty == item.Name ? "sort-active" : "")"
                           style="display: none"></i>
                        <i id="dateDescendingIcon" class="fa-solid fa-caret-down ms-1 @(!Model.SortAscending && Model.SortProperty == item.Name ? "sort-active" : "")"
                           style="display: none"></i>
                    </th>
                }

            </tr>
        </thead>
        <tbody>

            @if (Model.TotalItems <= 0)
            {
                <tr>
                    <td colspan="@Model.Properties.Count" class="text-center">Nenhum registro encontrado.</td>
                </tr>
            }
            else
            {
                @foreach (var item in Model.Items)
                {
                    <tr>
                        @foreach (var value in item.Values)
                        {
                            if (value != null && (value.Equals("true", StringComparison.InvariantCultureIgnoreCase) || value.Equals("false", StringComparison.InvariantCultureIgnoreCase)))
                            {
                                <td class="text-center">
                                    <i class="fa-solid @(value.Equals("True", StringComparison.InvariantCultureIgnoreCase) ? "fa-check text-success" : "fa-close text-danger") fa-lg"></i>
                                </td>
                            }
                            else
                            {
                                <td>@value</td>
                            }
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@await Component.InvokeAsync("Paginator", Model)

<script>
    function Search(propertyName = '', page = 1) {
        GetPagedResult('@Url.Action(Model.Action, Model.Controller)', page, propertyName, !@Model.SortAscending.ToString().ToLower(), '@Model.FormFilterId')
    }

    function GetPagedResult(url, page, sortProperty, sortAscending, formFilterId = null) {
        
        var filter = {
            Page: page,
            PageSize: 10,
            SortProperty: sortProperty,
            SortAscending: sortAscending
        };

        if (formFilterId) {
            var formData = getFormData($(`#${formFilterId}`));
            $.extend(filter, formData);
        }

        $.ajax({
            url: url,
            type: 'POST',
            data: JSON.stringify(filter),
            contentType: 'application/json',
            success: function (result) {
                $('#content-result').html(result);
            },
            error: function () {

            }
        });
    }

    function getFormData($form) {
        var unindexed_array = $form.serializeArray();
        var indexed_array = {};

        $.map(unindexed_array, function (n, i) {
            indexed_array[n['name']] = n['value'] == "" ? null : n['value'];
        });

        return indexed_array;
    }

</script>

<style>

    .sort-active {
        display: unset !important;
    }
</style>